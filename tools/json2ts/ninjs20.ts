/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The global unique identifier for this news object. This is the only required property and should identify the ninjs object, not be used for links to external resources etc.  nar:newsItem@guid
 */
export type UniformResourceIdentifier = string;
/**
 * The generic news type of this news object. (Value 'component' added in version 1.2 as issue #21.). See: http://cv.iptc.org/newscodes/ninature/ nar:itemClass
 */
export type Type = "text" | "audio" | "video" | "picture" | "graphic" | "composite" | "component";
/**
 * Indicates how complete this representation of a news item is. No mapping to nar. Specific for ninjs.
 */
export type RepresentationType = "full" | "partial";
/**
 * An identifier for the structure of the news object. This can be any string but we suggest something identifying the structure of the content such as 'text-only' or 'text-photo'. Profiles are typically provider-specific. nar:profile
 */
export type Profile = string;
/**
 * The version of the news object which is identified by the uri property. nar:newsItem@version
 */
export type Version = string;
/**
 * Indicates when the first version of this ninjs object was created. (Added in version 1.2 from issue #5). nar:firstCreated
 */
export type FirstCreated = string;
/**
 * The date and time when this version of this ninjs object was created. nar:versionCreated
 */
export type VersionCreated = string;
/**
 * The date and time when the content of this ninjs object was originally created. For example and old photo that is now handled as a ninjs object. nar:contentCreated
 */
export type ContentCreated = string;
/**
 * The date and time before which all versions of the news object are embargoed. If absent, this object is not embargoed. nar:embargoed
 */
export type Embargoed = string;
/**
 * The publishing status of the news object, its value is *usable* by default. nar:pubStatus
 */
export type PublicationStatus = "usable" | "withheld" | "canceled";
/**
 * The editorial urgency of the content. Values from 1 to 9. 1 represents the highest urgency, 9 the lowest. nar:urgency
 */
export type Urgency = number;
/**
 * The person or organisation claiming the intellectual property for the content. nar:copyrightHolder
 */
export type CopyrightHolder = string;
/**
 * Any necessary copyright notice for claiming the intellectual property for the content. nar:copyrightNotice
 */
export type CopyrightNotice = string;
/**
 * A natural-language statement about the usage terms pertaining to the content. nar:usageTerms
 */
export type UsageTerms = string;
/**
 * A note that is intended to be read by internal staff at the receiving organisation, but not intended to be published. (Added in version 1.2 from issue #6.). (Consider using this before using the descriptions array.) ednote: nar:edNote
 */
export type EditorialNote = string;
/**
 * The human language used by the content. The value should follow IETF BCP47. nar:language
 */
export type Language = string;
/**
 * The role of this description
 */
export type Role = string;
/**
 * The IANA (Internet Assigned Numbers Authority) MIME type of the content of this description.
 */
export type ContentType = string;
/**
 * The descriptive text identified with the above role (and contenttype).
 */
export type Value = string;
/**
 * An array of one or more descriptions of the ninjs object. See also ednote for information from provider to reciever. Descriptions are seen as metadata. For a simple description use an array with one object only containing the value property. Role and contenttype are then undefined and it is up to the provider.
 */
export type Descriptions = {
  role?: Role;
  contenttype?: ContentType;
  value: Value;
}[];
/**
 * The role of this body
 */
export type Role1 = string;
/**
 * The IANA (Internet Assigned Numbers Authority) MIME type of the content of this body.
 */
export type ContentType1 = string;
/**
 * The total character count in this body excluding figure captions. (Added in version 1.2 according to issue #27.). nar:charcount
 */
export type CharacterCount = number;
/**
 * The total number of words in this body excluding figure captions. (Added in version 1.2 according to issue #27.). nar:wordcount
 */
export type WordCount = number;
/**
 * The body text identified with the above role and contenttype.
 */
export type Value1 = string;
/**
 * An array of body objects with the content as text or with markup. For a simple body use an array with one object only containing the value property. Role and contenttype are then undefined and it is up to the provider.
 */
export type Bodies = {
  role?: Role1;
  contenttype?: ContentType1;
  charcount?: CharacterCount;
  wordcount?: WordCount;
  value: Value1;
}[];
/**
 * The role of this headline
 */
export type Role2 = string;
/**
 * The IANA (Internet Assigned Numbers Authority) MIME type of the content of this headline.
 */
export type ContentType2 = string;
/**
 * The headline identified with the above role and contenttype.
 */
export type Value2 = string;
/**
 * An array of objects containing various types of headlines. For a simple headline use an array with one object only containing the value property. Role and contenttype are then undefined and it is up to the provider.
 */
export type Headlines = {
  role?: Role2;
  contenttype?: ContentType2;
  value: Value2;
}[];
/**
 * The name of a person
 */
export type Name = string;
/**
 * The relationship of the content of the news object to the person
 */
export type Relationship = string;
/**
 * The identifier for the person as a complete uri with the code.
 */
export type URI = string;
/**
 * An identifier for the person as a free-text string.
 */
export type Literal = string;
/**
 * An array of objects describing individual human beings. nar:subject
 */
export type People = {
  name?: Name;
  rel?: Relationship;
  uri?: URI;
  literal?: Literal;
}[];
/**
 * The name of the organisation
 */
export type Name1 = string;
/**
 * The relationship of the content of the news object to the organisation
 */
export type Relationship1 = string;
/**
 * The identifier of the organisation as a complete uri
 */
export type URI1 = string;
/**
 * An identifier for the organisation as a free-text string.
 */
export type Literal1 = string;
/**
 * Ticker symbol used for the financial instrument
 */
export type Ticker = string;
/**
 * Identifier for the marketplace which uses the ticker symbols of the ticker property
 */
export type Exchange = string;
/**
 * Symbols used for a financial instrument linked to the organisation at a specific market place
 */
export type Symbols = {
  ticker?: Ticker;
  exchange?: Exchange;
}[];
/**
 * An array of objects describing administrative and functional structures which may, for example, act as as a business, as a political party or not-for-profit party. nar:subject
 */
export type Organisations = {
  name?: Name1;
  rel?: Relationship1;
  uri?: URI1;
  literal?: Literal1;
  symbols?: Symbols;
}[];
/**
 * The name of the place
 */
export type Name2 = string;
/**
 * The relationship of the content of the news object to the place
 */
export type Relationship2 = string;
/**
 * The identifier for the place as a complete uri
 */
export type URI2 = string;
/**
 * An identifier for the place as a free-text string.
 */
export type Literal2 = string;
/**
 * This object represents a geometry, feature, or collection of features.
 */
export type GeoJSONObject =
  | Point
  | MultiPointGeometry
  | LineString
  | MultiLineString
  | Polygon
  | MultiPolygonGeometry
  | GeometryCollection
  | Feature
  | FeatureCollection;
/**
 * For type `Point`, the `coordinates` member must be a single position.
 */
export type Point = Geometry;
/**
 * For type `MultiPoint`, the `coordinates` member must be an array of positions.
 */
export type MultiPointGeometry = Geometry;
/**
 * For type `LineString`, the `coordinates` member must be an array of two or more positions.
 *
 * A LinearRing is closed LineString with 4 or more positions. The first and last positions are equivalent (they represent equivalent points). Though a LinearRing is not explicitly represented as a GeoJSON geometry type, it is referred to in the Polygon geometry type definition.
 */
export type LineString = Geometry;
/**
 * For type `MultiLineString`, the `coordinates` member must be an array of LineString coordinate arrays.
 */
export type MultiLineString = Geometry;
/**
 * For type `Polygon`, the `coordinates` member must be an array of LinearRing coordinate arrays. For Polygons with multiple rings, the first must be the exterior ring and any others must be interior rings or holes.
 */
export type Polygon = Geometry;
/**
 * For type `MultiPolygon`, the `coordinates` member must be an array of Polygon coordinate arrays.
 */
export type MultiPolygonGeometry = Geometry;
/**
 * A GeoJSON object with type `GeometryCollection` is a geometry object which represents a collection of geometry objects.
 *
 * A geometry collection must have a member with the name `geometries`. The value corresponding to `geometries` is an array. Each element in this array is a GeoJSON geometry object.
 */
export type GeometryCollection = Geometry;
export type Geometry1 = Geometry | null;
export type Properties = {
  [k: string]: unknown;
} | null;
export type Features = Feature[];
/**
 * An array of named locations. nar:subject
 */
export type Places = (
  | {
      name?: Name2;
      rel?: Relationship2;
      uri?: URI2;
      literal?: Literal2;
      [k: string]: unknown;
    }
  | GeoJSONObject
)[];
/**
 * The name of the subject
 */
export type Name3 = string;
/**
 * The relationship of the content of the news object to the subject
 */
export type Relationship3 = string;
/**
 * The identifier of the subject as a complete uri
 */
export type URI3 = string;
/**
 * An identifier for the subject as a free-text string.
 */
export type Literal3 = string;
/**
 * An array of objects holding concepts with a relationship to the content. nar:subject
 */
export type Subjects = {
  name?: Name3;
  rel?: Relationship3;
  uri?: URI3;
  literal?: Literal3;
}[];
/**
 * The name of the event
 */
export type Name4 = string;
/**
 * The relationship of the content of the news object to the event
 */
export type Relationship4 = string;
/**
 * The identifier for the event as a complete uri
 */
export type URI4 = string;
/**
 * An identifier for the event as a free-text string.
 */
export type Literal4 = string;
/**
 * An array of objects describing something which happens in a planned or unplanned manner. nar:?
 */
export type Events = {
  name?: Name4;
  rel?: Relationship4;
  uri?: URI4;
  literal?: Literal4;
}[];
/**
 * The name of the object
 */
export type Name5 = string;
/**
 * The relationship of the content of the news object to the object
 */
export type Relationship5 = string;
/**
 * The identifier for the object as a complete uri
 */
export type URI5 = string;
/**
 * An identifier for the object as a free-text string.
 */
export type Literal5 = string;
/**
 * An array of objects describing something material, excluding persons. nar:subject
 */
export type Objects = {
  name?: Name5;
  rel?: Relationship5;
  uri?: URI5;
  literal?: Literal5;
}[];
/**
 * The name of the infosource
 */
export type Name6 = string;
/**
 * The role the infosource in relationship to the content as a uri.
 */
export type Role3 = string;
/**
 * The identifier of the infosource as a complete uri
 */
export type URI6 = string;
/**
 * An identifier for the infosource as a free-text string.
 */
export type Literal6 = string;
/**
 * An array of parties (person or organisation) which originated, modified, enhanced, distributed, aggregated or supplied the content or provided some information used to create or enhance the content. (Added in version 1.2 according to issue #15.) .    infosource:  nar:infoSource
 */
export type InfoSources = {
  name?: Name6;
  role?: Role3;
  uri?: URI6;
  literal?: Literal6;
}[];
/**
 * A short natural-language name for the item. Title is metadata, use headlines for publishable headlines. (Added in version 1.2 according to issue #9). nar:itemMeta/title
 */
export type Title = string;
/**
 * A natural-language statement about the creator (author, photographer etc.) of the content. nar:by
 */
export type By = string;
/**
 * A human-readable identifier for the item. (Added in version 1.2 from issue #4.). nar:slugline
 */
export type Slugline = string;
/**
 * The name of the location from which the content originates. nar:located
 */
export type Located = string;
/**
 * The name of this object in the array of renditions. For example 'thumbnail'
 */
export type Name7 = string;
/**
 * The URL for accessing the rendition as a resource. nar:remoteContent@ref
 */
export type Href = string;
/**
 * A MIME type which applies to this rendition. nar:remoteContent@contenttype
 */
export type ContentType3 = string;
/**
 * A title for the link to the rendition resource
 */
export type Title1 = string;
/**
 * For still and moving images: the height of the display area measured in pixels. nar:remoteContent@height
 */
export type Height = number;
/**
 * For still and moving images: the width of the display area measured in pixels. nar:remoteContent@width
 */
export type Width = number;
/**
 * The size of the rendition resource in bytes
 */
export type SizeInBytes = number;
/**
 * The total time duration of the content in seconds. (Added in version 1.2. Issue #18). nar:remoteContent@duration
 */
export type Duration = number;
/**
 * Binary format name. (Added in version 1.2. Issue #18). nar:remoteContent@format
 */
export type Format = string;
/**
 * An array of objects with different renditions of the news object. nar:remoteContent
 */
export type Renditions = {
  name: Name7;
  href?: Href;
  contenttype?: ContentType3;
  title?: Title1;
  height?: Height;
  width?: Width;
  sizeinbytes?: SizeInBytes;
  duration?: Duration;
  format?: Format;
}[];
/**
 * An array of objects with content of news objects which are associated with this news object.
 */
export type Associations = (
  | {
      /**
       * The name of this object in the array of associations. For example 'logo'
       */
      name: string;
      [k: string]: unknown;
    }
  | IPTCNinjsNewsInJSONVersion20DraftForApprovalAtIPTCStandardsCommittee
)[];
/**
 * The role of the alternative id
 */
export type Role4 = string;
/**
 * The alternative id value
 */
export type Value3 = string;
/**
 * Alternative identifiers assigned to the content. Each alternative id can have a role and a value. nar:altId issue #3.
 */
export type AlternativeIds = {
  role?: Role4;
  value?: Value3;
}[];
/**
 * The role of the trust indicator as a complete uri
 */
export type Role5 = string;
/**
 * The title of the resource being referenced.
 */
export type Title2 = string;
/**
 * The URL for accessing the trust indicator resource.
 */
export type Href1 = string;
/**
 * An array of objects to allow links to documents about trust indicators. issue #44. (Added in version 1.3)
 */
export type TrustIndicators = {
  role?: Role5;
  title?: Title2;
  href?: Href1;
}[];
/**
 * For example ninjs. nar:standard
 */
export type NameOfStandard = string;
/**
 * For example 1.3. nar:standardversion
 */
export type VersionOfStandard = string;
/**
 * The uri of the json schema to use for validation.
 */
export type Schema = string;
/**
 * The name of the genre
 */
export type Name8 = string;
/**
 * The identifier of  the genre as a complete uri
 */
export type URI7 = string;
/**
 * An identifier for the genre as a free-text string.
 */
export type Literal7 = string;
/**
 * A nature, intellectual or journalistic form of the content. nar:genre. (Added in version 1.3)
 */
export type Genres = {
  name?: Name8;
  uri?: URI7;
  literal?: Literal7;
}[];
/**
 * Expression of rights to be applied to content. nar:rightsInfo
 */
export type RightsInformation = {
  [k: string]: unknown;
};

/**
 * A news item as JSON object -- copyright 2021 IPTC - International Press Telecommunications Council - www.iptc.org - This document is published under the Creative Commons Attribution 4.0 license, see  http://creativecommons.org/licenses/by/4.0/
 */
export interface IPTCNinjsNewsInJSONVersion20DraftForApprovalAtIPTCStandardsCommittee {
  uri: UniformResourceIdentifier;
  type?: Type;
  representationtype?: RepresentationType;
  profile?: Profile;
  version?: Version;
  firstcreated?: FirstCreated;
  versioncreated?: VersionCreated;
  contentcreated?: ContentCreated;
  embargoed?: Embargoed;
  pubstatus?: PublicationStatus;
  urgency?: Urgency;
  copyrightholder?: CopyrightHolder;
  copyrightnotice?: CopyrightNotice;
  usageterms?: UsageTerms;
  ednote?: EditorialNote;
  language?: Language;
  descriptions?: Descriptions;
  bodies?: Bodies;
  headlines?: Headlines;
  people?: People;
  organisations?: Organisations;
  places?: Places;
  subjects?: Subjects;
  events?: Events;
  objects?: Objects;
  infosources?: InfoSources;
  title?: Title;
  by?: By;
  slugline?: Slugline;
  located?: Located;
  renditions?: Renditions;
  associations?: Associations;
  altids?: AlternativeIds;
  trustindicators?: TrustIndicators;
  standard?: Standard;
  genres?: Genres;
  rightsinfo?: RightsInformation;
}
/**
 * A geometry is a GeoJSON object where the type member's value is one of the following strings: `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, or `GeometryCollection`.
 */
export interface Geometry {
  type?: "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon" | "GeometryCollection";
  [k: string]: unknown;
}
/**
 * A GeoJSON object with the type `Feature` is a feature object.
 *
 * * A feature object must have a member with the name `geometry`. The value of the geometry member is a geometry object as defined above or a JSON null value.
 *
 * * A feature object must have a member with the name `properties`. The value of the properties member is an object (any JSON object or a JSON null value).
 *
 * * If a feature has a commonly used identifier, that identifier should be included as a member of the feature object with the name `id`.
 */
export interface Feature {
  type?: "Feature";
  geometry: Geometry1;
  properties: Properties;
  id?: unknown;
  [k: string]: unknown;
}
/**
 * A GeoJSON object with the type `FeatureCollection` is a feature collection object.
 *
 * An object of type `FeatureCollection` must have a member with the name `features`. The value corresponding to `features` is an array. Each element in the array is a feature object as defined above.
 */
export interface FeatureCollection {
  type?: "FeatureCollection";
  features: Features;
  [k: string]: unknown;
}
/**
 * An object with information about standard, version and schema this instance is valid against. nar:standard, nar:standardversion and xml:schema issue #43. (Added in version 1.3)
 */
export interface Standard {
  name?: NameOfStandard;
  version?: VersionOfStandard;
  schema?: Schema;
}
